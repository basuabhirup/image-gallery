{"version":3,"sources":["Components/ImageCard/ImageCard.js","Components/Gallery/Gallery.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","alt","className","src","imageURL","Gallery","onAddressChange","event","setState","currentAddress","target","value","onAddImage","newImages","state","images","push","render","type","onChange","placeholder","onClick","map","url","key","Math","random","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAceA,G,MAVG,SAACC,GAEf,OACI,yBACIC,IAAM,cACNC,UAAU,aACVC,IAAKH,EAAMI,aCsDRC,G,wDAxDX,WAAYL,GAAO,IAAD,8BACd,cAAMA,IAOVM,gBAAkB,SAACC,GACf,EAAKC,SAAS,CACVC,eAAgBF,EAAMG,OAAOC,SAVnB,EAelBC,WAAa,WAET,IAAMC,EAAS,YAAO,EAAKC,MAAMC,QAGjCF,EAAUG,KAAK,EAAKF,MAAML,gBAG1B,EAAKD,SAAS,CACVO,OAAQF,EACRJ,eAAgB,MAzBN,EA+BlBQ,OAAS,WACL,OACI,yBAAKf,UAAU,kBACX,uBAAGA,UAAU,SAAb,yBAEA,yBAAKA,UAAU,aACX,2BAAOgB,KAAK,OACRC,SAAU,EAAKb,gBACfc,YAAY,oBAChB,4BAAQC,QAAS,EAAKT,YAAtB,QAGJ,yBAAKV,UAAU,YACd,EAAKY,MAAMC,OAAOO,KAAI,SAACC,GACpB,OACA,kBAAC,EAAD,CAAWC,IAAG,UAAKD,EAAL,YAA0B,GAAdE,KAAKC,UACvBtB,SAAUmB,UA7C9B,EAAKT,MAAM,CACPC,OAAO,GACPN,eAAgB,IAJN,E,UAFAkB,IAAMC,Y,MCIbC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASlB,OACP,kBAAC,IAAMmB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.736b3ad0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './style.css';\r\n\r\nconst ImageCard = (props) =>{\r\n\r\n    return(\r\n        <img\r\n            alt = \"gallery pic\" \r\n            className=\"image-card\" \r\n            src={props.imageURL}></img>\r\n    )\r\n}\r\n\r\nexport default ImageCard","import React from 'react';\r\n\r\nimport ImageCard from '../ImageCard/ImageCard.js'\r\nimport './style.css';\r\n\r\n\r\nclass Gallery extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            images:[],\r\n            currentAddress: ''\r\n        }\r\n    }\r\n\r\n    onAddressChange = (event) => {\r\n        this.setState({\r\n            currentAddress: event.target.value\r\n        })\r\n\r\n    }\r\n\r\n    onAddImage = () => {\r\n        //Copy all previous images\r\n        const newImages = [...this.state.images]\r\n\r\n        //Add new image addess\r\n        newImages.push(this.state.currentAddress)\r\n\r\n        //update state by setstate\r\n        this.setState({\r\n            images: newImages,\r\n            currentAddress: '',\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render = () =>{\r\n        return(\r\n            <div className=\"root-container\">\r\n                <p className=\"title\">\r\n                    ----IMAGE GALLERY----</p>\r\n                <div className=\"input-box\">\r\n                    <input type=\"text\" \r\n                        onChange={this.onAddressChange}\r\n                        placeholder=\"Enter image URL\"/>\r\n                    <button onClick={this.onAddImage}>Add</button>\r\n                </div>\r\n\r\n                <div className=\"list-box\">\r\n                {this.state.images.map((url) => {\r\n                    return (\r\n                    <ImageCard key={`${url}-${Math.random()*10}`} \r\n                            imageURL={url}></ImageCard>\r\n                    )\r\n                })}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Gallery","import React from 'react';\nimport Gallery from './Components/Gallery/Gallery.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Gallery />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}